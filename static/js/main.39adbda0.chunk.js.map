{"version":3,"sources":["widgets/SalesOrderEntry/store.ts","widgets/SalesOrderEntry/index.tsx","widgets/CreditCheck/store.ts","widgets/CreditCheck/index.tsx","App.tsx","index.tsx"],"names":["useSalesOrderStore","create","set","get","salesOrderEntries","total","addEntry","entry","entries","reduce","accumulator","item","quantity","price","SalesOrderEntry","state","useState","itemName","setItemName","setPrice","setQuantity","entriesTable","Table","className","responsive","map","index","colSpan","Card","Header","Title","Body","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","value","parseFloat","parseInt","Button","variant","onClick","preventDefault","length","configurePersist","storage","localStorage","rootKey","persist","useCreditCheckStore","purge","key","allowlist","creditLimit","setCreditLimit","CreditCheck","compareValue","isCreditLimitLesser","setIsCreditLimitLesser","useEffect","App","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39adbda0.chunk.js","sourcesContent":["import create from 'zustand'\r\n\r\ntype salesOrderEntry = {\r\n    itemName: string,\r\n    price: number,\r\n    quantity: number\r\n}\r\n\r\ntype salesOrderStore = {\r\n    salesOrderEntries: Array<salesOrderEntry>,\r\n    total: number,\r\n    addEntry: (entry: salesOrderEntry) => void\r\n}\r\nexport const useSalesOrderStore = create<salesOrderStore>(\r\n    (set, get) => ({\r\n        salesOrderEntries: [],\r\n        total: 0,\r\n        addEntry: (entry) => {\r\n            const entries = get().salesOrderEntries\r\n            let total = entries.reduce((accumulator, item) => accumulator + (item.quantity * item.price), 0)\r\n            total += (entry.quantity * entry.price)\r\n            set({salesOrderEntries: [...entries, entry], total})\r\n        }\r\n    }))","import React, { useState } from 'react'\r\nimport { Button, Card, Form, Table } from 'react-bootstrap'\r\nimport { useSalesOrderStore } from './store'\r\n\r\nfunction SalesOrderEntry() {\r\n    const salesOrderEntries = useSalesOrderStore(state => state.salesOrderEntries)\r\n    const addEntry = useSalesOrderStore(state => state.addEntry)\r\n    const total = useSalesOrderStore(state => state.total)\r\n\r\n    const [itemName, setItemName] = useState(\"\")\r\n    const [price, setPrice] = useState(0)\r\n    const [quantity, setQuantity] = useState(0)\r\n    \r\n    const buttonHandler = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        addEntry({itemName, price, quantity})\r\n    }\r\n    const entriesTable = \r\n        <Table className=\"my-3\" responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>ItemName</th>\r\n                    <th>Price</th>\r\n                    <th>Quantity</th>\r\n                    <th>Subtotal</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {salesOrderEntries.map((entry, index) => {\r\n                    return <tr>\r\n                        <td>{entry.itemName}</td>\r\n                        <td>{entry.price}</td>\r\n                        <td>{entry.quantity}</td>\r\n                        <td>{entry.price * entry.quantity}</td>\r\n                    </tr>\r\n                })}\r\n            </tbody>\r\n            <tfoot>\r\n                <tr>\r\n                    <td colSpan={3} className=\"text-right font-weight-bold\">\r\n                        Total\r\n                    </td>\r\n                    <td className=\"font-weight-bold\">\r\n                        {total}\r\n                    </td>\r\n                </tr>\r\n            </tfoot>\r\n        </Table>\r\n    return (\r\n        <Card className=\"my-5\">\r\n            <Card.Header>\r\n                <Card.Title>Sales Order Entry</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form>\r\n                <Form.Group controlId=\"itemName\">\r\n                    <Form.Label>Item Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter item name\" onChange={(e) => setItemName(e.target.value)} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"price\">\r\n                    <Form.Label>Price</Form.Label>\r\n                    <Form.Control type=\"number\" placeholder=\"Enter price\" onChange={(e) => setPrice(parseFloat(e.target.value))} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"quantity\">\r\n                    <Form.Label>Quantity</Form.Label>\r\n                    <Form.Control type=\"number\" placeholder=\"Enter quantity\" onChange={(e) => setQuantity(parseInt(e.target.value))} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={buttonHandler}>\r\n                    Add\r\n                </Button>\r\n                </Form>\r\n                {salesOrderEntries.length > 0 ? entriesTable : <></>}\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default SalesOrderEntry\r\n","import create from 'zustand'\r\nimport {configurePersist} from 'zustand-persist'\r\n\r\nconst { persist, purge } = configurePersist({\r\n    storage: localStorage,\r\n    rootKey: 'root',\r\n})\r\ntype creditCheckStore = {\r\n    creditLimit: number,\r\n    setCreditLimit: (creditLimit: number) => void\r\n}\r\n\r\nexport const useCreditCheckStore = create<creditCheckStore>(\r\n    persist(\r\n        {\r\n            key: 'creditCheck',\r\n            allowlist: ['creditLimit']\r\n        }, \r\n        (set) => ({\r\n            creditLimit: 30000,\r\n            setCreditLimit: (creditLimit: number) => {\r\n                set({creditLimit})\r\n            }\r\n        })\r\n    )\r\n)","import React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Form } from 'react-bootstrap'\r\nimport { useCreditCheckStore } from './store'\r\n\r\nimport \"./index.css\"\r\n\r\ntype CreditCheckProps = {\r\n    compareValue?: number\r\n}\r\nfunction CreditCheck({compareValue}: CreditCheckProps) {\r\n\r\n    const creditLimit = useCreditCheckStore(state => state.creditLimit)\r\n    const setCreditLimit = useCreditCheckStore(state => state.setCreditLimit)\r\n    const [isCreditLimitLesser, setIsCreditLimitLesser] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (compareValue && creditLimit < compareValue) {\r\n            setIsCreditLimitLesser(true)\r\n        } else {\r\n            setIsCreditLimitLesser(false)\r\n        }\r\n    }, [compareValue, creditLimit])\r\n    const setAndCheckCreditLimit = (value: string) => {\r\n        setCreditLimit(parseFloat(value))\r\n    }\r\n    return (\r\n        <Card className=\"my-5\">\r\n            <Card.Header>\r\n                <Card.Title>Set and Check Credit Limit</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form>\r\n                <Form.Group controlId=\"formBasicEmail\" >\r\n                    <Form.Label>Credit Limit</Form.Label>\r\n                    <Form.Control className={isCreditLimitLesser ? \"blob red border border-danger\": \"border border-success\"} type=\"number\" placeholder=\"Enter credit limit\" value={creditLimit} onChange={(e) => setAndCheckCreditLimit(e.target.value)}/>\r\n                </Form.Group>\r\n                </Form>\r\n            </Card.Body>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default CreditCheck\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nimport { Container } from 'react-bootstrap';\nimport SalesOrderEntry from './widgets/SalesOrderEntry';\nimport CreditCheck from './widgets/CreditCheck';\nimport { useSalesOrderStore } from './widgets/SalesOrderEntry/store';\nfunction App() {\n  const total = useSalesOrderStore(state => state.total)\n  return (\n    <Container className=\"justify-content-center\">\n      <h1 className=\"my-3 text-center\">Surge POS</h1>\n      <CreditCheck compareValue={total} />\n      <SalesOrderEntry />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}